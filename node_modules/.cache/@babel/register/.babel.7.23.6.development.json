{"{\"assumptions\":{},\"sourceRoot\":\"/Users/catfood/project-mongo-api-connectiontest/\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/catfood/project-mongo-api-connectiontest\",\"filename\":\"/Users/catfood/project-mongo-api-connectiontest/server.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/catfood/project-mongo-api-connectiontest\",\"rootMode\":\"root\",\"plugins\":[],\"presets\":[]}:7.23.6:development":{"value":{"code":"import express from \"express\";\nimport cors from \"cors\";\nimport mongoose from \"mongoose\";\nimport listEndpoints from 'express-list-endpoints';\n\n// If you're using one of our datasets, uncomment the appropriate import below\n// to get started!\n// import avocadoSalesData from \"./data/avocado-sales.json\";\nimport booksData from \"./data/books.json\";\n// import goldenGlobesData from \"./data/golden-globes.json\";\n// import netflixData from \"./data/netflix-titles.json\";\n// import topMusicData from \"./data/top-music.json\";\n\nconst mongoUrl = process.env.MONGO_URL || \"mongodb://localhost/project-mongo\";\nconsole.log(`Connection to MongoDB using URL: ${mongoUrl}`);\nmongoose.connect(mongoUrl, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n}).then(() => console.log(\"MongoDB Connected\")).catch(err => console.error(\"MongoDB connection error:\", err));\nmongoose.Promise = Promise;\nconst Book = mongoose.model('Book', {\n  bookID: Number,\n  title: String,\n  authors: String,\n  average_rating: Number,\n  isbn: Number,\n  isbn13: Number,\n  language_code: String,\n  num_pages: Number,\n  ratings_count: Number,\n  text_reviews_count: Number\n});\nconst seedDatabase = async () => {\n  console.log(\"Starting database seeding...\");\n  await Book.deleteMany({});\n  console.log(\"Existing books deleted.\");\n\n  // booksData.forEach((bookData) => {\n  //   new Book(bookData).save()\n  // })\n\n  await Promise.all(booksData.map(bookData => new Book(bookData).save())).then(() => console.log(\"Database seeded successfully\")).catch(err => console.error(\"Error seeding database:\", err));\n};\nif (process.env.RESET_DATABASE == 'true') {\n  seedDatabase();\n}\n\n// Defines the port the app will run on. Defaults to 8080, but can be overridden\n// when starting the server. Example command to overwrite PORT env variable value:\n// PORT=9000 npm start..\nconst port = process.env.PORT || 8080;\nconst app = express();\n\n// Add middlewares to enable cors and json body parsing\napp.use(cors());\napp.use(express.json());\n\n// Start defining your routes here\napp.get(\"/\", (req, res) => {\n  res.json(listEndpoints(app));\n});\napp.get('/books', async (req, res) => {\n  try {\n    const books = await Book.find();\n    res.json(books);\n  } catch (error) {\n    res.status(400).json({\n      error: error.message\n    });\n  }\n});\napp.get('/books/:id', async (req, res) => {\n  // const id = req.params.id\n  // const book = booksData.find(b => b.bookID == id) // find book with id\n\n  try {\n    const book = await Book.findOne({\n      bookID: req.params.id\n    });\n    if (book) {\n      res.json(book);\n    } else {\n      res.status(404).send('there is no such thing like that');\n    }\n  } catch (error) {\n    res.status(500).json({\n      error: error.message\n    });\n  }\n});\n\n// Start the server\napp.listen(port, () => {\n  console.log(`Server running on http://localhost:${port}`);\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":{"version":3,"names":["express","cors","mongoose","listEndpoints","booksData","mongoUrl","process","env","MONGO_URL","console","log","connect","useNewUrlParser","useUnifiedTopology","then","catch","err","error","Promise","Book","model","bookID","Number","title","String","authors","average_rating","isbn","isbn13","language_code","num_pages","ratings_count","text_reviews_count","seedDatabase","deleteMany","all","map","bookData","save","RESET_DATABASE","port","PORT","app","use","json","get","req","res","books","find","status","message","book","findOne","params","id","send","listen"],"sourceRoot":"/Users/catfood/project-mongo-api-connectiontest/","sources":["server.js"],"sourcesContent":["import express from \"express\";\nimport cors from \"cors\";\nimport mongoose from \"mongoose\";\nimport listEndpoints from 'express-list-endpoints'\n\n// If you're using one of our datasets, uncomment the appropriate import below\n// to get started!\n// import avocadoSalesData from \"./data/avocado-sales.json\";\nimport booksData from \"./data/books.json\";\n// import goldenGlobesData from \"./data/golden-globes.json\";\n// import netflixData from \"./data/netflix-titles.json\";\n// import topMusicData from \"./data/top-music.json\";\n\nconst mongoUrl = process.env.MONGO_URL || \"mongodb://localhost/project-mongo\";\nconsole.log(`Connection to MongoDB using URL: ${mongoUrl}`)\nmongoose.connect(mongoUrl, { useNewUrlParser: true, useUnifiedTopology: true })\n  .then(() => console.log(\"MongoDB Connected\"))\n  .catch(err => console.error(\"MongoDB connection error:\", err))\nmongoose.Promise = Promise;\n\nconst Book = mongoose.model('Book', {\n  bookID: Number,\n  title: String,\n  authors: String,\n  average_rating: Number,\n  isbn: Number,\n  isbn13: Number,\n  language_code: String,\n  num_pages: Number,\n  ratings_count: Number,\n  text_reviews_count: Number\n})\n\nconst seedDatabase = async () => {\n  console.log(\"Starting database seeding...\")\n  await Book.deleteMany({})\n  console.log(\"Existing books deleted.\")\n\n  // booksData.forEach((bookData) => {\n  //   new Book(bookData).save()\n  // })\n\n  await Promise.all(booksData.map(bookData => new Book(bookData).save()))\n  .then(() => console.log(\"Database seeded successfully\"))\n  .catch(err => console.error(\"Error seeding database:\", err))\n}\n\n\nif (process.env.RESET_DATABASE == 'true') {\n  \n  seedDatabase()\n}\n\n// Defines the port the app will run on. Defaults to 8080, but can be overridden\n// when starting the server. Example command to overwrite PORT env variable value:\n// PORT=9000 npm start..\nconst port = process.env.PORT || 8080;\nconst app = express();\n\n// Add middlewares to enable cors and json body parsing\napp.use(cors());\napp.use(express.json());\n\n// Start defining your routes here\napp.get(\"/\", (req, res) => {\n  res.json(listEndpoints(app));\n});\n\napp.get('/books', async (req, res) => {\n  try {\n    const books = await Book.find()\n    res.json(books)\n  } catch (error) {\n    res.status(400).json({ error: error.message })\n  }\n})\n\napp.get('/books/:id', async (req, res) => {\n  // const id = req.params.id\n  // const book = booksData.find(b => b.bookID == id) // find book with id\n\n  \n  try {\n    const book = await Book.findOne({ bookID: req.params.id })\n    if (book) {\n      res.json(book)\n    } else {\n      res.status(404).send('there is no such thing like that')\n    }\n  } catch (error) {\n    res.status(500).json({ error: error.message })\n  }\n})\n\n// Start the server\napp.listen(port, () => {\n  console.log(`Server running on http://localhost:${port}`);\n});\n"],"mappings":"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"}},"mtime":1702721915047}}